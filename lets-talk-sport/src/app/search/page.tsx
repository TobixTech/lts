'use client'

import { useState, useEffect, Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import { 
  MagnifyingGlassIcon, 
  SparklesIcon,
  CalendarIcon,
  UserIcon,
  ClockIcon 
} from '@heroicons/react/24/outline'

// Mock data - replace with actual data from database
const mockArticles = [
  {
    id: '1',
    title: 'Marcus Rashford Injury Update: Manchester United Star Returns to Training',
    excerpt: 'Manchester United forward Marcus Rashford has returned to first-team training following his recent injury setback. The England international...',
    image: '/api/placeholder/400/250',
    club: 'Manchester United',
    category: 'Injury News',
    publishedAt: '2024-01-15T10:00:00Z',
    author: 'John Smith',
    readTime: '3 min read',
    relevance: 95
  },
  {
    id: '2',
    title: 'Rashford\'s Form Analysis: What\'s Behind the Recent Struggles?',
    excerpt: 'An in-depth analysis of Marcus Rashford\'s recent performances and what might be causing his dip in form...',
    image: '/api/placeholder/400/250',
    club: 'Manchester United',
    category: 'Analysis',
    publishedAt: '2024-01-14T15:30:00Z',
    author: 'Sarah Johnson',
    readTime: '5 min read',
    relevance: 88
  },
  {
    id: '3',
    title: 'Manchester United\'s Injury Crisis: Full Squad Update',
    excerpt: 'Latest updates on all Manchester United players currently sidelined with injuries...',
    image: '/api/placeholder/400/250',
    club: 'Manchester United',
    category: 'Team News',
    publishedAt: '2024-01-13T09:15:00Z',
    author: 'Mike Wilson',
    readTime: '4 min read',
    relevance: 82
  }
]

function SearchPageContent() {
  const searchParams = useSearchParams()
  const query = searchParams.get('q') || ''
  
  const [aiResponse, setAiResponse] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [articles, setArticles] = useState(mockArticles)

  useEffect(() => {
    if (query) {
      handleSearch(query)
    }
  }, [query])

  const handleSearch = async (searchQuery: string) => {
    setIsLoading(true)
    
    try {
      // In a real app, you would call your API endpoint here
      // For now, we'll simulate the AI response
      const response = await fetch('/api/search', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query: searchQuery }),
      })
      
      if (response.ok) {
        const data = await response.json()
        setAiResponse(data.aiResponse)
        setArticles(data.articles || mockArticles)
      } else {
        // Fallback to mock data
        setAiResponse(`Based on your search for &quot;${searchQuery}&quot;, here&apos;s what I found about this sports topic. This is a simulated AI response that would normally come from Google&apos;s Gemini API. In a real implementation, this would provide accurate, up-to-date information about the search query.`)
        setArticles(mockArticles)
      }
    } catch (error) {
      console.error('Search error:', error)
      // Fallback response
      setAiResponse(`Here&apos;s what I found about &quot;${searchQuery}&quot; in the world of sports. This is a simulated response that would normally be generated by AI to provide you with the most relevant and current information about your search.`)
      setArticles(mockArticles)
    } finally {
      setIsLoading(false)
    }
  }

  if (!query) {
    return (
      <div className="p-6 text-center">
        <div className="max-w-md mx-auto">
          <MagnifyingGlassIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Search for Sports News</h2>
          <p className="text-gray-600">Use the search bar above to find articles, players, teams, and more</p>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6 space-y-6">
      {/* Search Header */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900">Search Results</h1>
        <p className="text-gray-600 mt-2">Results for &quot;{query}&quot;</p>
      </div>

      {/* AI Response */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 p-6">
        <div className="flex items-center mb-4">
          <SparklesIcon className="h-6 w-6 text-blue-600 mr-2" />
          <h2 className="text-lg font-semibold text-blue-900">AI-Powered Response</h2>
        </div>
        
        {isLoading ? (
          <div className="animate-pulse">
            <div className="h-4 bg-blue-200 rounded mb-2"></div>
            <div className="h-4 bg-blue-200 rounded mb-2 w-3/4"></div>
            <div className="h-4 bg-blue-200 rounded w-1/2"></div>
          </div>
        ) : (
          <div className="text-blue-800">
            <p className="leading-relaxed">{aiResponse}</p>
          </div>
        )}
      </div>

      {/* Search Results */}
      <div>
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-900">
            Related Articles ({articles.length})
          </h2>
          <div className="text-sm text-gray-500">
            Sorted by relevance
          </div>
        </div>

        <div className="space-y-6">
          {articles.map((article) => (
            <article
              key={article.id}
              className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow"
            >
              <div className="md:flex">
                <div className="md:flex-shrink-0">
                  <div className="h-48 w-full md:w-48 bg-gray-200"></div>
                </div>
                <div className="p-6">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <span className="inline-block px-2 py-1 bg-red-600 text-white text-xs font-medium rounded-full">
                        {article.category}
                      </span>
                      <span className="text-sm text-gray-500">{article.club}</span>
                    </div>
                    <div className="flex items-center text-sm text-gray-500">
                      <ClockIcon className="h-4 w-4 mr-1" />
                      {article.readTime}
                    </div>
                  </div>
                  
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    {article.title}
                  </h3>
                  
                  <p className="text-gray-600 mb-4 line-clamp-3">
                    {article.excerpt}
                  </p>
                  
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <div className="flex items-center">
                        <UserIcon className="h-4 w-4 mr-1" />
                        {article.author}
                      </div>
                      <div className="flex items-center">
                        <CalendarIcon className="h-4 w-4 mr-1" />
                        {new Date(article.publishedAt).toLocaleDateString()}
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-500">
                        Relevance: {article.relevance}%
                      </span>
                      <button className="px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors">
                        Read More
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>

      {/* No Results Fallback */}
      {articles.length === 0 && !isLoading && (
        <div className="text-center py-12">
          <MagnifyingGlassIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No articles found</h3>
          <p className="text-gray-500">Try adjusting your search terms or browse our latest news</p>
        </div>
      )}
    </div>
  )
}

export default function SearchPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <SearchPageContent />
    </Suspense>
  )
}